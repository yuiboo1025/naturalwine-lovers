<div class="row-sm-md mt-4">
  <h5 class="font_bold">①お店の名前を検索フォームに入力し、検索ボタンをClick</h3>
</div>

<%#検索フォーム %>
<div class="row-sm-md my-2 ml-5">
  <input id="address" type="textbox" value="">
  <input type="button" value="検索" onclick="codeAddress()">
  <p>マーカーをドラック＆ドロップで位置の調整ができます。<p>
</div>

<%#map %>
<div class="row-sm-md ml-5">
  <div id='map'></div>
</div>

<%= form_with model: spot, url:method do |f| %>
<div class="row mt-3 ml-5">
    <div class="col-sm-md actions">
        <h6 class="mt-2">※mapの検索欄で入力し、「検索」ボタンを押すと自動的に入力されます</h6>
        <table class="table-responsive">
          <tr>
            <th style="width: 20%"><%= f.label :address,"住所" %></th>
            <td><%= f.text_field :address, size: 60 %></td>
          </tr>
          <tr>
            <th style="width: 15%"><%= f.label :lat,"緯度" %></th>
            <td> <%= f.text_field :lat, id: :lat %></td>
          </tr>
          <tr>
            <th style="width: 15%"><%= f.label :lng,"経度" %></th>
            <td><%= f.text_field :lng, id: :lng %></td>
          </tr>
        </table>
    </div>
</div>

<div class="row mt-3">
  <div class="col-sm-md-9">
        <h5 class="font_bold">②店の名前を入力してください</h5>
        <table class="table ml-5">
          <tr>
            <th style="width: 10%"><%= f.label :spot_name,"店名" %></th>
            <td><%= f.text_field :spot_name, size: 50 %></td>
          </tr>
        </table>
      </div>
    </div>
    <div class="row mt-3">
      <div class="col-sm-md-9">
        <h5 class="font_bold">③入力完了ボタンをClickし、ナチュール情報入力画面に進む</h5>

        <%# spot編集の場合(params[:wine_id]が存在している場合、wine_idの情報をspotに持たせる %>
        <% if params[:wine_id].present? %>
          <%= f.hidden_field :wine_id, :value => params[:wine_id] %>
        <% end %>

        <div class="spot_submit_btn col-7 justify-content-center my-3">
          <%= f.submit "→　店情報の入力完了", class:"btn btn-info btn-block ml-5 px-2" %>
        </div>
      </div>
    </div>
  <% end %>

<style>
#map {
  height: 500px;
  width: 1000px;
}

@media screen and (max-width:425px) {
  #map {
    height: 300px;
    width: 300px;
  }
 }

 @media screen and (max-width:425px) {
    input[type="text"] {
        width: 250px;
        height: 30px;
    }
 }
</style>

<script>
//初期マップの設定
let map //変数の定義
let marker
function initMap(){  //コールバック関数
   //Googleサーバーと通信するために必要なgoogle.maps.Geocoderのオブジェクト（インスタンス）を生成。APIにはこのオブジェクトを通してアクセス。
  geocoder = new google.maps.Geocoder() 

   //指定したオプションで新しい地図を作成。optionsはcenterとzoomの設定が必須。
  map = new google.maps.Map(document.getElementById('map'), { //'map'というidを取得してマップを表示
    center:  {lat: 35.6803997, lng:139.7690174},  //東京
    zoom: 8, //数値は0〜21まで指定でき、数値が大きいほど拡大される
  });
}


//検索後のマップ作成
let geocoder
let aft
  //検索フォームのボタンが押された時に実行される
function codeAddress(){
  //検索フォームの入力内容を取得
  let inputAddress = document.getElementById('address').value;  //addressのidを持った要素の中にある文字列（住所）を取得し、inputAddressに代入。
  geocoder.geocode( { 'address': inputAddress}, function(results, status) { 
    //geocoderオブジェクトにgeocode()メソッドを用いることで,ジオコーディングをするためのリクエストを送信
    //リクエストを送信するときは、APIの仕様でaddressかlocationかplaceIdのどれかの値を渡さなくてはならず
    //addressのプロパティに上記で定義したinputAddressの値を入れてパラメーターとして渡している。
    //リクエストが完了すると結果（results）とステータス（status）が返ってくるので、それらを取得して処理するために、resultsとstatusを引数にコールバック関数を記述
  
    //該当する検索結果がヒットした時
    if (status == 'OK') {
        //マーカーが複数できないようにする　aft = trueであれば、マーカーを削除する
        if (aft == true){
            //Marker.setMap()はMarkerクラスのメソッド。マーカーを指定した地図に設置します。引数にnullを指定すると、地図から取り除きます。
            marker.setMap(null);
        }

        //新しくマーカーを作成する
         //Map.setCenter()はMapクラスのメソッド。地図の位置座標をセットすると同時に、表示もその位置に変更されます。
        map.setCenter(results[0].geometry.location);
            marker = new google.maps.Marker({
              map: map,
              position: results[0].geometry.location,
              draggable: true	// ドラッグ可能にする
          });

        //二度目以降か判断するため、マーカー作成後　aft = true　にする
        aft = true

        //検索した時に緯度経度を入力する
         　//getElementById・・・Webページ(document)上から特定のidを持つオブジェクトを入手する関数
         　//緯度経度のエディットボックスに書き込まれている文字列(value)に、検索後の緯度経度の値を代入
        document.getElementById('lat').value = results[0].geometry.location.lat();
        document.getElementById('lng').value = results[0].geometry.location.lng();

        // 住所欄に住所を抽出して入れる
        $('#spot_address').val(getAddress(results[0].formatted_address));

        // マーカーのドロップ（ドラッグ終了）時のイベント
         //「addEventListener()」は、JavaScriptからさまざまなイベント処理を実行することができるメソッド
        google.maps.event.addListener( marker, 'dragend', function(ev){
            // イベントの引数evの、プロパティ.latLngが緯度経度 LatLngクラスは位置座標のインスタンスを作成するためのクラス
            document.getElementById('lat').value = ev.latLng.lat();
            document.getElementById('lng').value = ev.latLng.lng();

            geocoder.geocode({
              latLng: {lat: ev.latLng.lat(), lng: ev.latLng.lng()}
            },
            function(results, status) {
              // 住所欄に住所を抽出して入れる(formatted_addressのデータを取ってくる)
              $('#spot_address').val(getAddress(results[0].formatted_address));
            });
        });
    } else {
      alert('該当する結果がありませんでした：' + status);
    }
  });
}

// 住所のフォーマッティング マークした場所から住所を取ってくる
function getAddress (address) {
  address = address.split(/\s+|、/);  //スペースと句読点で区切る
  address.splice(0, 1)                //1くくり分削除  (0,1)・・・0番目から1つ削除
  if (address[0] == '日本') {        //日本で始まっていたらもう1くくり分削除
    address.splice(0, 1)
  }
  if (address[0].match(/〒/)) {      //〒で始まっていたらもう1くくり分削除
    address.splice(0, 1)
  }
  address = address.join(' ')
  return address
}
</script>

<%# URLにパラメータでcallback=initMapを付与して、APIが読み込まれたらinitMap()という関数を実行するようにしている。%>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API_KEY']%>&callback=initMap" async defer></script>